// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model profile {
  id        String    @id @default(cuid())
  userId    String    @unique
  name      String
  email     String    @unique
  imageUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  servers   Server[]
  members   Member[]
  channels  channel[]
}

model Server {
  id         String    @id @default(cuid())
  name       String
  imageUrl   String?
  inviteCode String    @unique
  profileid  String
  profile    profile   @relation(fields: [profileid], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  members    Member[]
  channels   channel[]

  @@index([profileid])
}

enum MemeberRole {
  GUEST
  ADMIN
  MEMBER
}

model Member {
  id        String      @id @default(uuid())
  profileId String
  role      MemeberRole @default(GUEST)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  profile   profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  ServerId  String
  server    Server      @relation(fields: [ServerId], references: [id], onDelete: Cascade)
  Messages Message[]
  directMessages DirectMessage[]
  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")
  @@index([profileId])
  @@index([ServerId])
}

enum CHANNELTYPE {
  TEXT
  VOICE
  VIDEO
}

model channel {
  id        String      @id @default(cuid()) @unique
  name      String
  serverId  String
  type      CHANNELTYPE @default(TEXT) 
  profileId String
  profile   profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  messages Message[]
  @@index([serverId])
  @@index([profileId])
}
model Message {
  id String  @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text
  memberId String 
  member Member @relation(fields: [memberId],references: [id],onDelete: Cascade)
  channelId String
  channel  channel @relation(fields: [channelId],references: [id])
  deleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([channelId])
  @@index([memberId])
}
model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}
model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}
  